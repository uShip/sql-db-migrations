name: ci-main

on:
  push:
    branches:
      - main

env:
  commit: ${{ github.sha }}

jobs:
  deploy:
    runs-on: [self-hosted, uship-linux]
    strategy:
      matrix:
        env: [dev, prod]
    environment: ${{ matrix.env}}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags
      - name: Set up Python 3.10.6
        uses: actions/setup-python@v3
        with:
          python-version: 3.10.6

      - name: Install Requirements and Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install pyodbc on the server
        run: |
          sudo dpkg --configure -a && true
          # sudo apt-get update && sudo apt-get install -y wget # Install wget if it's not available
          # chmod +x ./install_openssl.sh # Run the OpenSSL installation script
          # ./install_openssl.sh
          python extract_pyodbc.py | bash
          pip install pyodbc
        env:
          DISTRO: "Ubuntu"
          REMOVE_EXITS: 'true'
          DOCS_URL: "https://raw.githubusercontent.com/MicrosoftDocs/sql-docs/live/docs/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server.md"
          ODBC_VERSION: 18
        shell: bash

      - name: Modify/Configure OpenSSL, ODBC connection String
        run: |
          sudo chmod +rwx /etc/ssl/openssl.cnf
          sudo sed -i 's/TLSv1.2/TLSv1/g' /etc/ssl/openssl.cnf
          sudo sed -i 's/SECLEVEL=2/SECLEVEL=0/g' /etc/ssl/openssl.cnf
          echo '[system_default_sect]\nMinProtocol = TLSv1.0\nCipherString = DEFAULT@SECLEVEL=0' | sudo tee -a /etc/ssl/openssl.cnf
          echo 'export CONNECTION_STRING="$CONNECTION_STRING TrustServerCertificate=yes"' >> $GITHUB_ENV
        env:
          CONNECTION_STRING: "Driver={ODBC Driver 18 for SQL Server};Server=${{ secrets.DB_SERVER }};Database=${{ secrets.DATABASE }};Uid=${{ secrets.DB_USER }};Pwd=${{ secrets.DB_PASS }};"

      # - name: Fix SQL files
      #   run: |
      #     sqlfluff fix --dialect tsql . --exclude-rules RF04,LF05

      - name: Get modified SQL files
        id: changed-files-specific
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.{sh,sql,py}
          write_output_files: true

      - name: Run step if any file(s) in the docs folder change
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: |
          echo "One or more files in the docs folder has changed."
          echo "List all the files that have changed: ${{ steps.changed-files-specific.outputs.all_changed_and_modified_files }}"

      # Upload to SQL
      - name: Run Python script
        run:
          # Pass the list of SQL files to a Python script
          python deploy.py

        # run: python deploy.py
        env:
          DB_SERVER: ${{ secrets.DB_SERVER }}
          DB_NAME: ${{ secrets.DATABASE }}
          USERNAME: ${{ secrets.DB_USER }}
          PASSWORD: ${{ secrets.DB_PASS }}
          SQL_FILES: ${{ steps.changed-files-specific.outputs.all_changed_and_modified_files }}

      #Alert in Slack
      - uses: 8398a7/action-slack@v2
        if: always()
        with:
          status: ${{ job.status }}
          author_name: DB-MIGRATION-${{ matrix.env}}
        env:
          # GITHUB_TOKEN: ${{ secrets.SLACK_GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    # OLD FLYWAY
    # steps:
    # - uses: actions/checkout@v3

    # - name: Set up Java
    #   uses: actions/setup-java@v2
    #   with:
    #     java-version: 11
    #     distribution: 'adopt'

    # - name: Set up Flyway
    #   run: |
    #     curl -o /tmp/flyway.tar.gz https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.22.3/flyway-commandline-9.22.3-linux-x64.tar.gz
    #     tar -xzf /tmp/flyway.tar.gz -C /tmp
    #     sudo mv /tmp/flyway-9.22.3 /opt/flyway
    #     sudo ln -s /opt/flyway/flyway /usr/local/bin/flyway

    # - name: Test Database Connection with Flyway Info
    #   env:
    #     FLYWAY_URL: ${{secrets.DB_HOSTNAME}}
    #     FLYWAY_USER: ${{secrets.DB_USER}}
    #     FLYWAY_PASSWORD: ${{secrets.DB_PASS}}
    #   run: |
    #     sudo -E flyway info
