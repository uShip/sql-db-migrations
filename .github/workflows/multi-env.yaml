name: db-workflow

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Environment to deploy to (prod, dev, qa, sandbox)'
        options:
          - devPricing
          - dev
          - prod
          - qa
          - sandbox
        required: true
        default: 'devPricing'

jobs:
  deploy:
    runs-on: [self-hosted, uship-linux]
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Fetches all history for all branches and tags
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9

    - name: Validate environment
      run: |
        echo "Selected environment: ${{ github.event.inputs.environment }}"
        case "${{ github.event.inputs.environment }}" in prod|dev|qa|sandbox|devPricing)
            echo "Deploying to ${{ github.event.inputs.environment }}"
            ;;*)
            echo "Error: Invalid environment selected. Allowed values are prod, dev, qa, or sandbox"
            exit 1
            ;;
        esac

    - name: Install Requirements and Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install pyodbc on the server
      run: |
        sudo dpkg --configure -a && true
        python extract_pyodbc.py | bash
        pip install pyodbc
      env:
        DISTRO: "Ubuntu"
        REMOVE_EXITS: 'true'
        DOCS_URL: "https://raw.githubusercontent.com/MicrosoftDocs/sql-docs/live/docs/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server.md"
        ODBC_VERSION: 18
      shell: bash

    # - name: Fix SQL files
    #   run: |
    #     sqlfluff fix --dialect tsql . --exclude-rules RF04,LF05

    - name: Modify/Configure OpenSSL, ODBC connection String
      run: |
        sudo chmod +rwx /etc/ssl/openssl.cnf
        sudo sed -i 's/TLSv1.2/TLSv1/g' /etc/ssl/openssl.cnf
        sudo sed -i 's/SECLEVEL=2/SECLEVEL=0/g' /etc/ssl/openssl.cnf
        echo '[system_default_sect]\nMinProtocol = TLSv1.0\nCipherString = DEFAULT@SECLEVEL=0' | sudo tee -a /etc/ssl/openssl.cnf
        echo 'export CONNECTION_STRING="$CONNECTION_STRING TrustServerCertificate=yes"' >> $GITHUB_ENV
      env:
        CONNECTION_STRING: "Driver={ODBC Driver 18 for SQL Server};Server=${{ secrets.DB_SERVER }};Database=${{ secrets.DATABASE }};Uid=${{ secrets.DB_USER }};Pwd=${{ secrets.DB_PASS }};"


    - name: Get modified SQL files
      id: changed-files-specific
      uses: tj-actions/changed-files@v40
      with:
        files: |
          **/*.{sql,py}
        write_output_files: true

    - name: Check if SQL files changed
      id: check-sql-changed
      run: |
        if [[ "${{ steps.changed-files-specific.outputs.any_changed }}" == 'true' ]]; then
          echo "One or more SQL files have changed."
          echo "List all the SQL files that have changed: ${{ steps.changed-files-specific.outputs.all_changed_and_modified_files }}"
          echo "Deploying functions..."
          # Add your deployment logic here
        else
          echo "No SQL files have changed. Skipping deployment."
        fi

      # Upload to SQL
    - name: Run Python script
      if: steps.check-sql-changed.outputs.any_changed == 'true'
      run: python deploy.py
      env:
        DB_SERVER: ${{ secrets.DB_SERVER }}
        DB_NAME: ${{ secrets.DATABASE }}
        USERNAME: ${{ secrets.DB_USER }}
        PASSWORD: ${{ secrets.DB_PASS }}
        SQL_FILES: ${{ steps.changed-files-specific.outputs.all_changed_and_modified_files }}

    #Alert in Slack
    - uses: 8398a7/action-slack@v2
      if: always()
      with:
        status: ${{ job.status }}
        author_name: DB-MIGRATION-${{ github.event.inputs.environment }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
